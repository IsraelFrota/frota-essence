// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Role {
  id                  Int          @id @default(autoincrement())
  name                Roles        @unique
  users               User[]       @relation("UserRole")
}

model User {
  id                  Int          @id @default(autoincrement())
  fullName            String
  nickname            String
  email               String       @unique
  password            String
  position            String
  department          String
  status              String?
  profilePhoto        Bytes?
  roleId              Int       
  role                Role         @relation("UserRole", fields: [roleId], references: [id])
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  sentFeedbacks       Feedback[]   @relation("SentFeedbacks")
  receivedFeedbacks   Feedback[]   @relation("ReceivedFeedbacks")
  posts               Post[]       @relation("UserPost")
  reactions           Reaction[]   @relation("UserPostReaction")
  commets             Comment[]    @relation("UserPostComment")

  groups              Group[]      @relation("GroupMembers")
  events              Event[]      @relation("EventParticipants")

  @@index([email])
  @@index([roleId])
}

model Group {
  id                  Int          @id @default(autoincrement())
  name                String
  description         String?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt

  members             User[]       @relation("GroupMembers")
}

model Event {
  id                  Int          @id @default(autoincrement())
  name                String
  description         String
  location            String?
  startDate           DateTime
  endDate             DateTime
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt

  participants        User[]       @relation("EventParticipants")
}

model Feedback {
  id                  Int          @id @default(autoincrement())
  type                TypeFeedback
  message             String
  response            String?
  date                DateTime     @default(now())
  fromUserId          Int
  toUserId            Int
  fromUser            User         @relation("SentFeedbacks", fields: [fromUserId], references: [id])
  toUser              User         @relation("ReceivedFeedbacks", fields: [toUserId], references: [id])
}

model Post {
  id                  Int          @id @default(autoincrement())
  userId              Int
  user                User         @relation("UserPost", fields: [userId], references: [id])
  content             String
  file                Bytes?
  type                String
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  reactions           Reaction[]   @relation("PostReactions")
  comments            Comment[]    @relation("PostComments")

  @@index([userId])
}

model Reaction {
  id                  Int          @id @default(autoincrement())
  userId              Int
  postId              Int
  type                TypeReaction
  createdAt           DateTime     @default(now())
  post                Post         @relation("PostReactions", fields: [postId], references: [id])
  user                User         @relation("UserPostReaction", fields: [userId], references: [id])

  @@index([userId])
  @@index([postId])
}

model Comment {
  id                  Int          @id @default(autoincrement())
  userId              Int
  postId              Int
  message             String
  createdAt           DateTime     @default(now())
  post                Post         @relation("PostComments", fields: [postId], references: [id])
  user                User         @relation("UserPostComment", fields: [userId], references: [id])

  @@index([userId])
  @@index([postId])
}

enum Roles {
  Administrator
  Manager
  Commom
}

enum TypeFeedback {
  Constructive
  Corrective
  Feedforward
  Motivator
  Negative
  Personal
  Positive
}

enum TypeReaction {
  Like
  Love
  Haha
  Wow
  Sad
  Angry
}
